Source Code: Property Price Prediction
1. Import Libraries

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
2. Load Dataset


# Load dataset
data = pd.read_csv("house_data.csv")  # Replace with your dataset path

# Preview dataset
print(data.head())
3. Preprocess the Data


# Handle missing values (example: filling with mean)
data.fillna(data.mean(), inplace=True)

# Encode categorical features
data = pd.get_dummies(data, drop_first=True)

# Separate features (X) and target (y)
X = data.drop('SalePrice', axis=1)  # Replace 'SalePrice' with your target column
y = data['SalePrice']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
4. Train the Model


# Initialize the model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)
5. Make Predictions

# Predict on the test set
y_pred = model.predict(X_test)
6. Evaluate the Model

# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R2 Score: {r2}")
7. Predict New Data

# Create a new property data sample (replace with real values)
new_property = pd.DataFrame({
    'Feature1': [value1],
    'Feature2': [value2],
    # Add all features present in X_train
})

# Predict the price
predicted_price = model.predict(new_property)
print(f"Predicted Price: {predicted_price[0]}")
